<style>
  article .alignBox {
    background-color: <%= locals.setting.pointColor %>;
  }
</style>
<article>
  <section class="alignBox">
    <div class="count">검색결과 : <%= pn.totalCount %></div>
    <div class="align">
      <select name="type" onchange="window.open(value, '_self');">
        <option value="around?filter="">전체</option>
        <% types.forEach(t => { %>
        <option value="around?filter=<%= t.slug %>"<% if (filter === t.slug) { %> selected<% } %>><%= t.title %></option>
        <% }) %>
      </select>
      <select name="align" onchange="window.open(value, '_self');">
        <option value="around?<% if (filter) { %>filter=<%= filter %>&<% } %>align=distance"<% if (align === 'distance') { %> selected<% } %>>거리순</option>
        <option value="around?<% if (filter) { %>filter=<%= filter %>&<% } %>align=update"<% if (align === 'update') { %> selected<% } %>>업데이트순</option>
        <option value="around?<% if (filter) { %>filter=<%= filter %>&<% } %>align=view"<% if (align === 'view') { %> selected<% } %>>조회순</option>
        <option value="around?<% if (filter) { %>filter=<%= filter %>&<% } %>align=review"<% if (align === 'review') { %> selected<% } %>>리뷰순</option>
        <option value="around?<% if (filter) { %>filter=<%= filter %>&<% } %>align=grade"<% if (align === 'grade') { %> selected<% } %>>평점순</option>
      </select>
    </div>
  </section>
  <%- include('../offline/stores') %>
</article>
<script>
  const getGeolocation = () => {
    return new Promise((resolve, reject) => {
      const xhr = new XMLHttpRequest();
      xhr.open('GET', '/api/offline/geolocation');
      xhr.onload = () => {
        const result = xhr.responseText;
        resolve(result);
      };
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.send();
    });
  };

  const setGeolocation = (latitude, longitude) => {
    return new Promise((resolve, reject) => {
      const data = {
        latitude,
        longitude,
      }
      const xhr = new XMLHttpRequest();
      xhr.open('POST', '/api/offline/geolocation');
      xhr.onload = () => {
        const result = xhr.responseText;
        resolve(result);
      };
      xhr.setRequestHeader('Content-Type', 'application/json');
      xhr.send(JSON.stringify(data));
    });
  };

  window.onload = async () => {
    const geoCookie = await getGeolocation();
    if (!geoCookie) {
      navigator.geolocation.getCurrentPosition(async (pos) => {
        const latitude = pos.coords.latitude;
        const longitude = pos.coords.longitude;
        const result = await setGeolocation(latitude, longitude);
        if (result) {
          window.location.reload();
        }
      }, async (err) => {
        const result = await setGeolocation(null, null);
        if (result) {
          window.location.reload();
        }
      });
    }
  };
</script>